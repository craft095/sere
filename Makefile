JSON=../json/single_include
Z3=../z3
Z3LIBPATH=$(Z3)/build
Z3LIB=$(Z3LIBPATH)/libz3.so
AUTOCHECK=../autocheck/include
CATCH2=../Catch2/single_include

ANTLR4=/usr/local/include/antlr4-runtime

# output binary
BIN := dist

TESTS := sere_tests

SERE_GRAMMAR := Sere.g4

SERE_LIBRARY := libsere.a

# source files
RT_SRCS :=                      \
	rt/RtPredicate.cpp 	\
	rt/RtNfasl.cpp	 	\

BOOLEAN_SRC :=                  \
	boolean/Expr.cpp        \

AST_SRCS :=                     \
	ast/BoolExpr.cpp	\
	ast/SereExpr.cpp	\
	ast/Parser.cpp		\
	$(OBJDIR)/ast/SereBaseVisitor.cpp 	\
	$(OBJDIR)/ast/SereLexer.cpp		\
	$(OBJDIR)/ast/SereParser.cpp		\
	$(OBJDIR)/ast/SereVisitor.cpp		\

NFASL_SRCS :=                   \
        nfasl/Nfasl.cpp 	\
        nfasl/BisimNfasl.cpp 	\

SAT_SRCS :=                     \
        sat/Cnf.cpp 		\
        sat/Z3.cpp 		\

COMMON_SRCS :=

SERE_SRCS :=        		\
	$(RT_SRCS)		\
	$(BOOLEAN_SRC) 		\
	$(AST_SRCS)		\
	$(SAT_SRCS)		\
	$(NFASL_SRCS)		\
	$(COMMON_SRCS)		\

SERE_TESTS_SRCS :=	       	\
	test/EvalBoolExpr.cpp	\
	test/EvalExpr.cpp	\
	test/EvalNfasl.cpp	\
	test/EvalRtNfasl.cpp 	\
	test/EvalSere.cpp	\
	test/GenNfasl.cpp	\
	test/Letter.cpp		\
	test/Main.cpp		\
	test/TestNfasl.cpp	\
	test/TestRtNfasl.cpp 	\
	test/TestSere.cpp	\
	test/TestParser.cpp  	\
	test/ToolsZ3.cpp     	\
#	$(SERE_SRCS)

# files included in the tarball generated by 'make dist' (e.g. add LICENSE file)
DISTFILES := $(BIN)

# filename of the tar archive generated by 'make dist'
DISTOUTPUT := $(BIN).tar.gz

# intermediate directory for generated object files
OBJDIR := .o
# intermediate directory for generated dependency files
DEPDIR := .d

# object files, auto generated from source files
OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SRCS)))
SERE_LIBRARY_OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SERE_SRCS)))
SERE_TESTS_OBJS := $(patsubst %,$(OBJDIR)/%.o,$(basename $(SERE_TESTS_SRCS)))
# dependency files, auto generated from source files
DEPS := $(patsubst %,$(DEPDIR)/%.d,$(basename $(SRCS)))

# compilers (at least gcc and clang) don't create the subdirectories automatically
$(shell mkdir -p $(dir $(OBJS)) >/dev/null)
$(shell mkdir -p $(dir $(DEPS)) >/dev/null)

# C compiler
CC := gcc
# C++ compiler
CXX := g++
# linker
LD := g++
# linker
AR := ar rc
# tar
TAR := tar

# C flags
CFLAGS :=
# C++ flags
CXXFLAGS :=  -std=c++17 -I. -I$(OBJDIR) -I$(JSON) -I$(Z3)/src/api -I$(AUTOCHECK) -I$(CATCH2) -I$(ANTLR4) -fPIC
# C/C++ flags
CPPFLAGS := -g -Wall -Wextra -pedantic -Wno-attributes -lpthread
# linker flags
LDFLAGS :=

SERE_LIBRARY_LIBS := $(Z3LIB) -lantlr4-runtime -lpthread -lminisat -Wl,-rpath,$(Z3LIBPATH)

LDLIBS := $(Z3LIB) -lgtest -lantlr4-runtime -lpthread -lminisat -Wl,-rpath,$(Z3LIBPATH)
# flags required for dependency generation; passed to compilers
DEPFLAGS = -MT $@ -MD -MP -MF $(DEPDIR)/$*.Td

# compile ANTLR4 source files
COMPILE.g4 = antlr4 -Dlanguage=Cpp -package parser -no-listener -visitor -o $(OBJDIR)
# compile C source files
COMPILE.c = $(CC) $(DEPFLAGS) $(CFLAGS) $(CPPFLAGS) -c -o $@
# compile C++ source files
COMPILE.cc = $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(CPPFLAGS) -c -o $@
# link object files to binary
LINK.o = $(LD) -o $@ $(LDFLAGS)
# precompile step
PRECOMPILE =
# postcompile step
POSTCOMPILE = mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d

all: $(BIN)

dist: $(DISTFILES)
	$(TAR) -cvzf $(DISTOUTPUT) $^

.PHONY: clean
clean:
	$(RM) -r $(OBJDIR) $(DEPDIR)

.PHONY: distclean
distclean: clean
	$(RM) $(BIN) $(DISTOUTPUT)

.PHONY: install
install:
	@echo no install tasks configured

.PHONY: uninstall
uninstall:
	@echo no uninstall tasks configured

.PHONY: check
check: $(BIN)
	./sere_tests

.PHONY: help
help:
	@echo available targets: all dist clean distclean install uninstall check

ast/Parser.cpp : $(OBJDIR)/ast/SereParser.cpp $(OBJDIR)/ast/SereBaseVisitor.cpp

sere_tests: $(SERE_TESTS_OBJS) $(SERE_LIBRARY)
	$(LINK.o) $^ $(LDLIBS)

nfasl_tests: $(NFASL_TESTS_OBJS)
	$(LINK.o) $^  $(LDLIBS)

$(SERE_LIBRARY) : $(SERE_LIBRARY_OBJS)
	ar rc $@ $+
	ranlib $@

$(OBJDIR)/%Parser.cpp: %.g4
$(OBJDIR)/%Parser.cpp: %.g4 $(DEPDIR)/%.d
	$(COMPILE.g4) $<

$(OBJDIR)/%.o: %.c
$(OBJDIR)/%.o: %.c $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.c) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: $(OBJDIR)/%.cpp
$(OBJDIR)/%.o: $(OBJDIR)/%.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

$(OBJDIR)/%.o: %.cpp
$(OBJDIR)/%.o: %.cpp $(DEPDIR)/%.d
	$(PRECOMPILE)
	$(COMPILE.cc) $<
	$(POSTCOMPILE)

.PRECIOUS: $(DEPDIR)/%.d
$(DEPDIR)/%.d: ;

-include $(DEPS)
